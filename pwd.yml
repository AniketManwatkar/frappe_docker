version: "3"

services:
  # ─── Application server ───────────────────────────────────────────────
  backend:
    image: frappe/erpnext:v15.72.2
    networks:
      - frappe_network
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    environment:
      # Replace local DB host/port with Render’s Postgres
      - DB_HOST=${RENDER_PG_HOST}            # e.g. db.yourrender.com
      - DB_PORT=${RENDER_PG_PORT}            # typically 5432
      - DB_NAME=${RENDER_PG_DATABASE}        # your DB name
      - DB_USER=${RENDER_PG_USER}            # your DB user
      - DB_PASSWORD=${RENDER_PG_PASSWORD}    # your DB password

  # ─── Initial configurator for Frappe site config ──────────────────────
  configurator:
    image: frappe/erpnext:v15.72.2
    entrypoint: [bash, -c]
    command: >
      bench set-config -g db_host     $$DB_HOST;
      bench set-config -g db_port     $$DB_PORT;
      bench set-config -g redis_cache     "$$REDIS_CACHE";
      bench set-config -g redis_queue     "$$REDIS_QUEUE";
      bench set-config -g redis_socketio  "$$REDIS_SOCKETIO";
      bench set-config -gp socketio_port  $$SOCKETIO_PORT;
    environment:
      # All Redis URLs come from Render’s services
      - DB_HOST=${RENDER_PG_HOST}
      - DB_PORT=${RENDER_PG_PORT}
      - REDIS_CACHE=${REDIS_CACHE_URL}        # render://cache
      - REDIS_QUEUE=${REDIS_QUEUE_URL}        # render://queue
      - REDIS_SOCKETIO=${REDIS_SOCKETIO_URL}  # render://socketio
      - SOCKETIO_PORT=9000
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  # ─── Site creation ────────────────────────────────────────────────────
  create-site:
    image: frappe/erpnext:v15.72.2
    entrypoint: [bash, -c]
    command: >
      wait-for-it -t 120 $$DB_HOST:$$DB_PORT;
      wait-for-it -t 120 ${REDIS_CACHE_URL#redis://}:6379;
      wait-for-it -t 120 ${REDIS_QUEUE_URL#redis://}:6379;
      bench new-site --db-host $$DB_HOST --db-port $$DB_PORT
                    --db-name $$DB_NAME --db-user $$DB_USER --db-password $$DB_PASSWORD
                    --admin-password ${ADMIN_PASSWORD}
                    --install-app erpnext --set-default frontend;
    environment:
      - DB_HOST=${RENDER_PG_HOST}
      - DB_PORT=${RENDER_PG_PORT}
      - DB_NAME=${RENDER_PG_DATABASE}
      - DB_USER=${RENDER_PG_USER}
      - DB_PASSWORD=${RENDER_PG_PASSWORD}
      - REDIS_CACHE=${REDIS_CACHE_URL}
      - REDIS_QUEUE=${REDIS_QUEUE_URL}
      - SOCKETIO_PORT=9000
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  # ─── Web frontend (NGINX + static assets) ─────────────────────────────
  frontend:
    image: frappe/erpnext:v15.72.2
    depends_on:
      - websocket
    command: nginx-entrypoint.sh
    environment:
      - BACKEND=backend:8000
      - FRAPPE_SITE_NAME_HEADER=frontend
      - SOCKETIO=websocket:9000
      - PROXY_READ_TIMEOUT=120
      - CLIENT_MAX_BODY_SIZE=50m
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    ports:
      - "8080:8080"

  # ─── Background workers & scheduler ───────────────────────────────────
  queue-long:
    image: frappe/erpnext:v15.72.2
    command: bench worker --queue long,default,short
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  queue-short:
    image: frappe/erpnext:v15.72.2
    command: bench worker --queue short,default
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  scheduler:
    image: frappe/erpnext:v15.72.2
    command: bench schedule
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  websocket:
    image: frappe/erpnext:v15.72.2
    command: node /home/frappe/frappe-bench/apps/frappe/socketio.js
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

# ─── Named volumes (persistent storage) ────────────────────────────────
volumes:
  sites:
  logs:

# ─── Private network for service-to-service communication ───────────────
networks:
  frappe_network:
    driver: bridge
